import {
  GetStaticProps,
  InferGetServerSidePropsType,
  type NextPage,
} from "next";
import Head from "next/head";
import { SignInButton, SignedIn, SignedOut } from "@clerk/nextjs";
import { useUser, UserButton } from "@clerk/nextjs";

import { api } from "~/utils/api";
import type { RouterOutputs } from "~/utils/api";
import Image from "next/image";
import { LoadingPage } from "~/components/loading";
import { useRouter } from "next/router";

type PostViewProps = RouterOutputs["posts"]["getAll"][0];

const PostView = (props: PostViewProps) => {
  const { post, author } = props;

  return (
    <div className="flex border-b border-slate-400 p-8" key={post.id}>
      <div>
        <button>
          <Image
            className="rounded-full"
            src={author?.profileImageUrl}
            alt="profile picture"
            width={56}
            height={56}
          />
        </button>
      </div>
      <div className="flex flex-col text-slate-300">
        <div>{author.firstName}</div>
        <div>{post.content}</div>
      </div>
    </div>
  );
};

const ProfileFeed = () => {
  const userId = useRouter().query.slug;

  const { data, isLoading } = api.posts.getUserPosts.useQuery({
    userId: userId as string,
  });

  if (isLoading) {
    return <LoadingPage />;
  }

  return (
    <div className="flex flex-col">
      {data?.map((fullPost) => (
        <PostView key={fullPost.post.id} {...fullPost} />
      ))}
    </div>
  );
};

const ProfileHeader = () => {
  const userId = useRouter().query.slug;

  const { data, isLoading } = api.users.getUser.useQuery({
    userId: userId as string,
  });

  if (isLoading) {
    return <LoadingPage />;
  }
  if (!data) {
    return <div>Something went wrong. User cannot be retrieved.</div>;
  }

  return (
    <div className="flex flex-col items-center border-b border-slate-400 p-8">
      <div className="flex flex-col items-center">
        <Image
          className="rounded-full"
          src={data.user.profileImageUrl}
          alt="profile picture"
          width={56}
          height={56}
        />
        <div className="text-slate-300">{data?.user.firstName}</div>
      </div>
    </div>
  );
};

type PageProps = InferGetServerSidePropsType<typeof getStaticProps>;

const ProfilePage: NextPage<PageProps> = ({ slug }) => {
  console.log("slugg");
  console.log(slug);

  //prefetch posts for feed

  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex h-screen justify-center">
        <div className="h-full w-full border-x border-slate-400  md:max-w-2xl">
          <ProfileHeader />
          <div className="border-b border-slate-400 p-4">
            <SignedIn></SignedIn>
            <SignedOut>
              <SignInButton />
            </SignedOut>
          </div>

          <ProfileFeed />
        </div>
      </main>
    </>
  );
};

import { createServerSideHelpers } from "@trpc/react-query/server";
import { appRouter } from "~/server/api/root";
import { prisma } from "~/server/db";
import superjson from "superjson";

export const getStaticProps: GetStaticProps = async (context) => {
  const ssg = createServerSideHelpers({
    router: appRouter,
    ctx: { prisma, userId: null },
    transformer: superjson, // optional - adds superjson serialization
  });

  const slug = context.params?.slug as string;

  await ssg.users.getUser.prefetch({ userId: slug });
  await ssg.posts.getUserPosts.prefetch({
    userId: slug,
  });

  return {
    props: {
      trpcState: ssg.dehydrate(),
      slug,
    },
  };
};

export const getStaticPaths = () => {
  return {
    paths: [],
    fallback: "blocking",
  };
};

export default ProfilePage;
